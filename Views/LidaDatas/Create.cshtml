@model NTest.Models.LidaData

@{
    ViewData["Title"] = "Create";
}


<h4>LidaData</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <span class="text-primary"><strong>Step &nbsp;1: Select LiDAR Data</strong></span>
        <div class="mb-2"></div>
        <div class="custom-file col">
            <input type="file" class="custom-file-input" id="fileInp"
                   name="File"  accept=".txt, .word">
            <label class="custom-file-label" for="fileInp">Load LiDAR Data</label>
        </div>
        <hr />
        <form asp-action="Create" method="post" enctype="multipart/form-data">
            <hr />
            <span class="text-primary"><strong>Step &nbsp;2: Select Image</strong></span>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group row ml-n2">
                <div class="input-group-prepend  col-3">
                    <span class="input-group-text text-primary" id="inputGroupFileAddon01">Upload</span>
                </div>
                <div class="custom-file col">
                    <input type="file" class="custom-file-input" id="imgInp"
                           accept=".jpg, .jpeg, .png" name="imageFile">
                    <label class="custom-file-label text-primary" for="imgInp">Select Image</label>
                </div>
            </div>
            <div class="form-group row">
                <label asp-for="SlopeAngle" class="control-label col-5 text-primary">SlopeAngle(deg)</label>
                <input id="inp0" class="form-control col js-stepper" type="number" asp-for="SlopeAngle" step="1" max="100" min="0" data-stepper-debounce="400">

            </div>

            <div class="form-group row">
                <label asp-for="ImageClock" class="control-label col-5 text-primary"></label>
                <input asp-for="ImageClock" class="form-control col" id="inp1" />
                <span asp-validation-for="ImageClock" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <label asp-for="LidarClock" class="control-label col-5 text-primary"></label>
                <input asp-for="LidarClock" class="form-control col" id="inp2" />
                <span asp-validation-for="LidarClock" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <label asp-for="PrependDist" class="control-label col-5 text-primary"></label>
                <input asp-for="PrependDist" class="form-control col" id="inp3" />
                <span asp-validation-for="PrependDist" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <label asp-for="GroudDist" class="control-label col-5 text-primary">GroudDist(cm/pix)</label>
                <input asp-for="GroudDist" class="form-control col" id="inp4" />
                <span asp-validation-for="GroudDist" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>

            <div class="form-group">
                <img id="blah" src="~/uploads/@Model?.ImageURL" alt="your image" style="width: 500px;height: auto;" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>

        var dragImgUpload = new DragImgUpload("#drop_area", {
            callback: function (files) {
                var file = files[0];
                console.log(file.name);
            }
        })

        $('#imgInp').change(function () {
            readURL(this);
        });


        $("#fileInp").on('change', function (evt) {
            var file = this.files[0];

            var reader = new FileReader();
            reader.onload = function (progressEvent) {
                // By lines
                var lines = this.result.trim().split('\r\n');
                for (var i = 0; i < lines.length; i++) {
                    $('#inp' + i).val(lines[i]);
                }
            };
            reader.readAsText(file);
        });


        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#blah').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]); // convert to base64 string
            }
        }


        function FileLineStreamer() {
            var loopholeReader = new FileReader();
            var chunkReader = new FileReader();
            var delimiter = "\n".charCodeAt(0);

            var expectedChunkSize = 15000000; // Slice size to read
            var loopholeSize = 200;         // Slice size to search for line end

            var file = null;
            var fileSize;
            var loopholeStart;
            var loopholeEnd;
            var chunkStart;
            var chunkEnd;
            var lines;
            var thisForClosure = this;
            var handler;

            // Reading of loophole ended
            loopholeReader.onloadend = function (evt) {
                // Read error
                if (evt.target.readyState != FileReader.DONE) {
                    handler(null, new Error("Not able to read loophole (start: )"));
                    return;
                }
                var view = new DataView(evt.target.result);

                var realLoopholeSize = loopholeEnd - loopholeStart;

                for (var i = realLoopholeSize - 1; i >= 0; i--) {
                    if (view.getInt8(i) == delimiter) {
                        chunkEnd = loopholeStart + i + 1;
                        var blob = file.slice(chunkStart, chunkEnd);
                        chunkReader.readAsText(blob);
                        return;
                    }
                }

                // No delimiter found, looking in the next loophole
                loopholeStart = loopholeEnd;
                loopholeEnd = Math.min(loopholeStart + loopholeSize, fileSize);
                thisForClosure.getNextBatch();
            };

            // Reading of chunk ended
            chunkReader.onloadend = function (evt) {
                // Read error
                if (evt.target.readyState != FileReader.DONE) {
                    handler(null, new Error("Not able to read loophole"));
                    return;
                }

                lines = evt.target.result.split(/\r?\n/);
                // Remove last new line in the end of chunk
                if (lines.length > 0 && lines[lines.length - 1] == "") {
                    lines.pop();
                }

                chunkStart = chunkEnd;
                chunkEnd = Math.min(chunkStart + expectedChunkSize, fileSize);
                loopholeStart = Math.min(chunkEnd, fileSize);
                loopholeEnd = Math.min(loopholeStart + loopholeSize, fileSize);

                thisForClosure.getNextBatch();
            };

            this.getProgress = function () {
                if (file == null)
                    return 0;
                if (chunkStart == fileSize)
                    return 100;
                return Math.round(100 * (chunkStart / fileSize));
            }

            // Public: open file for reading
            this.open = function (fileToOpen, linesProcessed) {
                file = fileToOpen;
                fileSize = file.size;
                loopholeStart = Math.min(expectedChunkSize, fileSize);
                loopholeEnd = Math.min(loopholeStart + loopholeSize, fileSize);
                chunkStart = 0;
                chunkEnd = 0;
                lines = null;
                handler = linesProcessed;
            };

            // Public: start getting new line async
            this.getNextBatch = function () {
                // File wasn't open
                if (file == null) {
                    handler(null, new Error("You must open a file first"));
                    return;
                }
                // Some lines available
                if (lines != null) {
                    var linesForClosure = lines;
                    setTimeout(function () { handler(linesForClosure, null) }, 0);
                    lines = null;
                    return;
                }
                // End of File
                if (chunkStart == fileSize) {
                    handler(null, null);
                    return;
                }
                // File part bigger than expectedChunkSize is left
                if (loopholeStart < fileSize) {
                    var blob = file.slice(loopholeStart, loopholeEnd);
                    loopholeReader.readAsArrayBuffer(blob);
                }
                // All file can be read at once
                else {
                    chunkEnd = fileSize;
                    var blob = file.slice(chunkStart, fileSize);
                    chunkReader.readAsText(blob);
                }
            };
        };

    </script>
}
